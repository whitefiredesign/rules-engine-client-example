{"version":3,"sources":["components/Navbox.js","App.js","index.js"],"names":["apiUrl","Navbox","state","title","thumbnail","body","titleCheck","thumbnailCheck","bodyCheck","setImagePreview","file","a","async","reader","FileReader","onload","e","document","getElementById","src","target","result","readAsDataURL","handleUpdate","id","files","setState","value","getData","output","fields","length","t","Image","width","height","Object","entries","field","fetch","method","JSON","stringify","headers","response","json","push","processAudit","message","loading","pass","className","data","i","payload","this","htmlFor","type","onChange","rows","onClick","alt","Component","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.6ae18e49.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst apiUrl =\n    \"https://f6gwvurnnb.execute-api.eu-west-2.amazonaws.com/dev/rules/\";\n\nclass Navbox extends Component {\n    state = {\n        title : \"\",\n        thumbnail: \"\",\n        body: \"\",\n        titleCheck:false,\n        thumbnailCheck:false,\n        bodyCheck:false\n    };\n\n    setImagePreview = async (file) => {\n        let reader = new FileReader();\n        reader.onload = e => {\n            document.getElementById(\"thumbnail-preview\").src\n                = e.target.result;\n        };\n        reader.readAsDataURL(file);\n    };\n\n    handleUpdate = (e) => {\n        if(e.target.id==='thumbnail') {\n            this.setImagePreview(e.target.files[0]);\n        }\n\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    };\n\n    getData = async () => {\n        const { title, body } = this.state;\n        let fields = {\n            title: {},\n            thumbnail: {},\n            body: {}\n        };\n        let output = [];\n\n        // Title\n        fields['title']['charcount'] = title.length;\n\n        // Thumbnail\n        let t = new Image();\n        t.onload = () => {\n            fields['thumbnail']['width'] = t.width;\n            fields['thumbnail']['height'] = t.height;\n        };\n        t.src =\n            document.getElementById(\"thumbnail-preview\").src;\n\n        // Body\n        fields['body']['charcount'] = body.length;\n\n        for(const [field, value] of Object.entries(fields)) {\n\n            let response =\n                await fetch(\n                apiUrl + 'navbox/' + field,\n                {\n                    method: 'post',\n                    body: JSON.stringify(value),\n                    headers: {\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json'\n                    }\n                }\n            );\n\n            output.push(await response.json());\n        }\n\n        return output;\n    };\n\n    processAudit = async () => {\n\n        const message = (field, loading, pass, message) => {\n            return <div>\n                {(loading ? <div className=\"loader\" /> : '')}\n                Checking {field}...\n                {(!loading ? (pass\n                    ? <span className=\"pass\">&#10003;</span>\n                    : <span className=\"fail\">&#10005;</span>\n                ) : '')}\n                <div className=\"message\">{message}</div>\n            </div>\n        };\n\n        this.setState({\n            titleCheck:message('title', true),\n            thumbnailCheck:message('thumbnail', true),\n            bodyCheck:message('body', true)\n        });\n\n        /**\n         * TODO: This could be cleaner\n         */\n        const data = await this.getData();\n        for(let i=0; i<data.length; i++) {\n            if(data[i].pass) {\n                if(data[i].payload.field==='title') {\n                    this.setState({\n                        titleCheck:message('title', false, true)\n                    })\n                }\n                if(data[i].payload.field==='thumbnail') {\n                    this.setState({\n                        thumbnailCheck:message('thumbnail', false, true)\n                    })\n                }\n                if(data[i].payload.field==='body') {\n                    this.setState({\n                        bodyCheck:message('body', false, true)\n                    })\n                }\n            } else {\n                if(data[i].payload.field==='title') {\n                    this.setState({\n                        titleCheck:message(\n                            'title',\n                            false,\n                            false,\n                            data[i].message\n                        )\n                    })\n                }\n                if(data[i].payload.field==='thumbnail') {\n                    this.setState({\n                        thumbnailCheck:message(\n                            'thumbnail',\n                            false,\n                            false,\n                            data[i].message\n                        )\n                    })\n                }\n                if(data[i].payload.field==='body') {\n                    this.setState({\n                        bodyCheck:message(\n                            'body',\n                            false,\n                            false,\n                            data[i].message\n                        )\n                    })\n                }\n            }\n        }\n    };\n\n    render() {\n        const {\n            title,\n            thumbnail,\n            body,\n            titleCheck,\n            thumbnailCheck,\n            bodyCheck\n        } = this.state;\n\n        return(\n            <>\n                <h3>Rules engine client demo</h3>\n                <hr />\n                <p>Fill in the form to add content to the Navbox then click 'Audit' to check whether it's valid.</p>\n                <div className=\"form\">\n                    <label htmlFor=\"title\">Title</label>\n                    <input id=\"title\" type=\"text\"\n                           onChange={(e) => this.handleUpdate(e)}\n                           value={title}\n                    />\n                    <label htmlFor=\"thumbnail\">Thumbnail</label>\n                    <input id=\"thumbnail\" type=\"file\"\n                           onChange={(e) => this.handleUpdate(e)}\n                           value={thumbnail}\n                    />\n                    <label htmlFor=\"body\">Body</label>\n                    <textarea id=\"body\"\n                              rows=\"10\"\n                              onChange={(e) => this.handleUpdate(e)}\n                              value={body} />\n\n                    <button onClick={this.processAudit}>Process audit</button>\n                    <hr />\n                    <div className=\"audit\">\n                        <h3>Audit results will appear below.</h3>\n                        {titleCheck}\n                        {thumbnailCheck}\n                        {bodyCheck}\n                    </div>\n                </div>\n                <div className=\"preview\">\n                    <div className=\"navbox\">\n                        <div className=\"navbox-title\">\n                            {title}\n                            <div className=\"field-helper\">Title</div>\n                        </div>\n                        <div className=\"navbox-thumbnail\">\n                            <img id=\"thumbnail-preview\" src=\"//placehold.it/300/200\" alt=\"\" />\n                            <div className=\"field-helper\">Thumbnail</div>\n                        </div>\n                        <div className=\"navbox-body\">\n                            {body}\n                            <div className=\"field-helper\">Body</div>\n                        </div>\n                        <div className=\"navbox-actions\">\n                            <button>CLICK OR TAP HERE <br /><small>(just for show)</small></button>\n                        </div>\n                    </div>\n                    <div>\n                        <h3>Policy</h3>\n                        <ul>\n                            <li><b>Title</b> character count must be greater than 3 and less than 20</li>\n                            <li><b>Thumbnail</b> must be exactly 300x300px</li>\n                            <li><b>Body</b> character count must be greater than 300 and less than 400</li>\n                        </ul>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default Navbox;","import React from 'react';\nimport './App.css';\nimport Navbox from \"./components/Navbox\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Navbox />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}